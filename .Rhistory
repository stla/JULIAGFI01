b=-1,
pair=2,
type=1,
include=1)
)
D11["x1"] <- D21["x1"] <- intersect(D11,D21)
D11["x2"] <- D22["x1"] <- intersect(D11,D22)
D12["x1"] <- D21["x2"] <- intersect(D12,D21)
D12["x2"] <- D22["x2"] <- intersect(D12,D22)
part <- rbind(D11,D12,D21,D22)
part[, c("y1", "y2")] <-  vertices(part)
# k=3 - pas encore de slope
a <- rnorm(1,4)
D31 <- newD(list(
a=a,
pair=3,
type=0,
include=NA)
)
D32 <- newD(list(
a=a+0.1,
pair=3,
type=1,
include=NA
))
active <- which(part[,"include"]==1)
sigma <- c(part[active, c("x1","x2")])
VTsum <-  c(part[active,c("y1","y2")])
mM <- findSupport(VTsum, sigma, D31["a"], D32["a"])
D31["b"] <- D32["b"] <- runif(1,mM[1],mM[2])
active <- which(part[,"include"]==1)
x <- c(part[active, c("x1","x2")])
y <- c(part[active, c("y1","y2")])
par(tck = 0.02, mgp = c(1.7, 0.3, 0))
plot(x, y, type = "p", pch = 1, col = "black", xlim = range(x), ylim = range(y))
Plot_ConvexHull(x, y, lcolor="green")
abline(a=D31["a"], b=D31["b"])
abline(a=D32["a"], b=D32["b"])
part <- findVert(part, D31)
part <- findVert(part, D32)
active <- which(part[,"include"]==1)
x <- c(part[active, c("x1","x2")])
y <- c(part[active, c("y1","y2")])
points(x, y, type = "p", pch = 19,col="blue")
Plot_ConvexHull(x, y, lcolor="red")
wd <- "C:\\Users\\User\\Pictures\\CyberShot\\18-04-2014\\"
# the folder containing the figures :
fig.path <- wd
# all JPG figures :
figures <- list.files(fig.path, pattern=".JPG", all.files=TRUE)
# resize all figures
for(i in 1:length(figures)){
infile <- paste0(wd,figures[i])
out <-   paste0(wd,"compressed_", figures[i])
comm <- paste("convert -strip -interlace Plane -gaussian-blur 0.05 -quality 30%", infile, out)
shell(comm)
}
wd <- "C:\\Users\\User\\Pictures\\CyberShot\\19-04-2014\\"
# the folder containing the figures :
fig.path <- wd
# all JPG figures :
figures <- list.files(fig.path, pattern=".JPG", all.files=TRUE)
# resize all figures
for(i in 1:length(figures)){
infile <- paste0(wd,figures[i])
out <-   paste0(wd,"compressed_", figures[i])
comm <- paste("convert -strip -interlace Plane -gaussian-blur 0.05 -quality 30%", infile, out)
shell(comm)
}
1.99*10^(-26) * 6.022*10^23
print(1.99*10^(-26) * 6.022*10^23 , digits=20)
1.99*6.022
print(1.99*10^(-26) * 6.022*10^23 , digits=22)
print(1.99*6.022, digits=20)
print(1.99*6.022, digits=22)
print(1.99*6.022, digits=23)
1.99*6.022==11.98378
print(199*6022, digits=20)
library(Rcpp)
demo(RcppGibbs)
help(pa=Rcpp)
vignette("Rcpp-introduction")
library(Rcpp)
library(inline)
src <- '
Rcpp::NumericVector xa(a);
Rcpp::NumericVector xb(b);
int n_xa = xa.size(), n_xb = xb.size();
Rcpp::NumericVector xab(n_xa + n_xb - 1);
for (int i = 0; i < n_xa; i++)
for (int j = 0; j < n_xb; j++)
xab[i + j] += xa[i] * xb[j];
return xab;
'
fun <- cxxfunction(signature(a = "numeric", b = "numeric"), src, plugin = "Rcpp")
install.packages("inline")
library(Rcpp)
library(inline)
src <- '
Rcpp::NumericVector xa(a);
Rcpp::NumericVector xb(b);
int n_xa = xa.size(), n_xb = xb.size();
Rcpp::NumericVector xab(n_xa + n_xb - 1);
for (int i = 0; i < n_xa; i++)
for (int j = 0; j < n_xb; j++)
xab[i + j] += xa[i] * xb[j];
return xab;
'
fun <- cxxfunction(signature(a = "numeric", b = "numeric"), src, plugin = "Rcpp")
fun(1:3, 1:4)
n = c(12,13,14,16,16)
m = c(11,2,23,45,67)
a = c(34,343,5,2,1)
b = c(88,33,2,1,44)
db = data.frame (n,m,a,b )
db
mean.dataframe = function (df)
{
for (i in 1:ncol(df))
{
j[i]= mean(df[[i]])
}
print (j)
}
avgcol = mean.dataframe(db)
mean.dataframe = function (df)
{
j = rep(NA,ncol(df))
for (i in 1:ncol(df))
{
j[i]= mean(df[[i]])
}
print (j)
}
mean.dataframe(db)
?abs
julia.path <- "C:\\Program Files (x86)\\JuliaStudio-0.4.4\\julia-studio\\julia\\bin"
PATH <-  Sys.getenv()["PATH"]
stringr::str_detect(tolower(PATH), "julia")
Sys.setenv(PATH = paste0(PATH,";", julia.path))
toTest <- c("R", "python", "scala", "bash")
where <- Sys.which(toTest)
exists <- nchar(where) > 0
exists
library(devtools)
install_github("runr","yihui")
library(runr)
?proc_julia
j = proc_julia()
j$start()
library(runr)
help(pa=runr)
proc_bash
proc_bash$exec
runr:::new_results
runr:::new_source
proc_bash$exec("hello")
proc_bash()$exec("hello")
?inference
install.packages("jvmr")
library("jvmr")
.jvmr.jar
pnorm(0, mean=10, sd=1)
pnorm(0, mean=2, sd=0.7)
pnorm(0, mean=20, sd=1)
pnorm(0, mean=30, sd=1)
ppois(100,1)
ppois(100,1) == 1
0.72*150/1000
pi/6
install.packages(c("GGally", "ggplot2", "markdown", "RGtk2", "roxygen2"))
install.packages(c("knitr", "plotrix"))
setwd("D:/Github/JULIAGFI01")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
help(pa=knitr)
hook_scianimator
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
install.packages("shiny")
slidify("index.Rmd")
slidify("index.Rmd")
source("assets/R/slidifyMacros.R")
source('samsung/FiducialR/R/particle_01_functions.R')
library(animation)
library(scales)
install.packages(c("animation", "scales"))
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
?partial
shiny::tags
library(slidify)
?author
setwd("~/Github")
author("JULIAGFI01", use_git=FALSE, open_rmd=FALSE)
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
setwd("/tmp/testdeck")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("/tmp")
author("testdeck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
source('/tmp/testdeck/assets/R/slidifyMacros.R')
require(shiny)
linebreak <- function(height="10pt"){
html <- tags$hr(style="height:%s; visibility:hidden;")
sprintf(as.character(html), height)
}
codechunk <- function(code, file=NULL, size="100%", dirfile="assets/Julia"){
if(!is.null(file)){
code <- paste(readLines(file.path(dirfile, file)), collapse="\n")
}
html <- '<pre><code class="r" style="font-size:%s">%s
</code></pre>'
html <- sprintf(html, size, code)
cat(html)
}
# marche pas comme voulu, faire un scale iframe
includeGadfly0 <- function(file, dirfile="assets/Julia", width=NULL, height=NULL){ # width in mm
id <- paste0("gadfly_",file)
file <- paste0(file, ".js")
if(!is.null(width)){
if(is.null(height)) height <- width
viewbox <- paste("0 0", width, height)
newattr <- sprintf('d3.select("#%s svg").attr("viewBox", "%s").attr("preserveAspectRatio", "xMidYMid meet")',
id, viewbox)
}else{
newattr <- ""
}
html <- '<iframe srcdoc=\'
<head>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="./assets/js/gadfly.js"></script>
</head>
<body>
<div id="%s"></div>
<script src="./assets/Julia/%s"></script>
<script>
</script>
<script>
draw("#%s");
</script>
<script>
%s
</script>
</body>
\' src="demo_iframe_srcdoc.htm">
<p>Your browser does not support iframes.</p>
</iframe>'
html <- sprintf(html, id, file, id, newattr)
cat(html)
}
includeGadfly1 <- function(file, dirfile="assets/Julia", scale=NULL, height){ # width in mm
id <- paste0("gadfly_",file)
if(!is.null(scale)){
html <- 'var width = parseFloat(d3.select("#%s svg").attr("width"))
var height = parseFloat(d3.select("#%s svg").attr("height"))
d3.select("#%s svg").attr("width", width*%s +"mm").attr("height", height*%s +"mm");'
newattr <- sprintf(html, id, id, id, scale, scale)
}else{
newattr <- ""
}
html <- '<!DOCTYPE html>
<html>
<head>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="../js/gadfly.js"></script>
</head>
<body>
<div id="%s"></div>
<script src="../Julia/%s"></script>
<script>
draw("#%s");
</script>
<script>
%s
</script>
</body>
</html>'
html <- sprintf(html, id, paste0(file, ".js"), id, newattr)
htmlFile <-  paste0(file, ".html")
cat(html, file=file.path(".", "assets", "img", htmlFile))
cat(sprintf('<iframe src="assets/img/%s" style="border: none; height:%s"></iframe>', htmlFile, height))
}
# ?a d?conne avec srcdoc, utiliser un vrai iframe
includeGadfly <- function(file, dirfile="assets/Julia", width=NULL, height=NULL, scale=1){ # width = "10px"
id <- paste0("gadfly_",file)
file <- paste0(file, ".js")
if(!is.null(width)){
if(is.null(height)) height <- width
css <- sprintf('<style type="text/css">
#frame {
width: %s;
height: %s;
}
#frame {
-ms-zoom: %s;
-moz-transform: scale(%s);
-o-transform: scale(%s);
-webkit-transform: scale(%s);
-o-transform-origin: 0 0;
-webkit-transform-origin: 0 0;
}
</style>', width, height, scale,scale,scale,scale)
}else{
css <- ""
}
html <- '<iframe id="frame" style="border: none;"  srcdoc=\'
<head>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="./assets/js/gadfly.js"></script>
</head>
<body>
<div id="%s"></div>
<script src="./assets/Julia/%s"></script>
<script>
</script>
<script>
draw("#%s");
</script>
</body>
\' src="xxx.htm">
<p>Your browser does not support iframes.</p>
</iframe>'
html <- sprintf(html, id, file, id)
cat(css, "\n")
cat(html)
}
helpPopup <- function(title, content,
placement=c('right', 'top', 'left', 'bottom'),
trigger=c('hover', 'click', 'focus', 'manual'),
glue = NULL) {
tagList(
singleton(
tags$head(
tags$script("$(function() { $(\"[data-toggle='popover']\").popover(); })")
)
),
tags$a(
#  href = "#", class = "tip", `data-toggle` = "popover",
href = "javascript: void(0)",
class = "btn btn-default",
`data-toggle` = "popover",
title = title,
`data-content` = content,
# added this parameter
`data-html` = TRUE,
#
`data-animation` = TRUE,
`data-placement` = match.arg(placement, several.ok=TRUE)[1],
`data-trigger` = match.arg(trigger, several.ok=TRUE)[1],
glue,
tags$i(class="icon-info-sign")
),
# CB added for popup width control
tags$style(type='text/css', ".popover { width: 400px; relative; left: 320px !important; }")
# end add
)
}
source('/tmp/testdeck/assets/R/slidifyMacros.R')
source('/tmp/testdeck/assets/R/slidifyMacros.R')
slidify("index.Rmd")
slidify("index.Rmd")
codechunk
codechunk
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
file.exists("./assets/img/range.gif")
file.exists("./assets/img/range.gif")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
2
setwd("/tmp/testmathj")
library(slidify)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
markdown::markdownExtensions()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
extensions
slidify("index.Rmd")
slidify("index.Rmd")
extensions
is.element(extensions("superscript","lax_spacing")
is.element(extensions,c("superscript","lax_spacing")
)
slidify("index.Rmd")
extensions <- markdown::markdownExtensions()
options(markdown.extensions=extensions[is.element(extensions,c("superscript","lax_spacing"))])
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
markdownHTMLOptions()
library(markdown)
markdownHTMLOptions()
slidify("index.Rmd")
slidify
render_page
slidify::render_slides
slidify:::render_slides
slidify:::render_slide
help(pa=knitr)
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
extensions
help(pa=markdown)
getOption("markdown.extensions")
slidify("index.Rmd")
getOption("markdown.extensions")
getOption("markdown.extensions")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
